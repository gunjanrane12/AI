//server
#include <iostream>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <fstream>
#include <string.h>
#include <unistd.h>
using namespace std;

#define PORT 31337
std::string file_name;
int main(int argc, char const *argv[]) {
    int server_fd, new_socket, valread;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);
    char buffer[1024] = {0};
    FILE* file;

    if (argc != 3) {
        std::cout << "Usage: ./server IP_address PORT\n";
        return -1;
    }

    // Creating socket file descriptor
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = inet_addr(argv[1]);
    address.sin_port = htons(PORT);

    // Setting up the options on the socket
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        std::cerr << "Failed to set the options on the socket\n";
        return -1;
    }

    // Binding the socket to the address and port
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        std::cerr << "Bind failed. Error:" << errno << "\n";
        return -1;
    }

    // Listening on the socket, queue length: 3
    if (listen(server_fd, 3) < 0) {
        std::cerr << "Listen failed." << "\n";
        return -1;
    }

    std::cout << "Listening on port: " << PORT << "\n";

    // Accepting the data connection
    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {
        std::cerr << "Accept failed." << "\n";
        return -1;
    }

    // Reading the file name from the client
    if ((valread = recv(new_socket, buffer, 1024, 0)) < 0) {
        std::cerr << "Error reading from socket" << "\n";
        return -1;
    }
    buffer[valread] = '\0';
    file_name = buffer;

    // Opening the file to send
    file = fopen("fromserver.txt", "wb");
    if (file == NULL) {
        std::cerr << "Error opening file: " << file_name << "\n";
        return -1;
    }

    if ((valread = recv(new_socket, buffer, 1024, 0)) < 0) {
        std::cerr << "Error reading from socket" << "\n";
        return -1;
    }
    buffer[valread] = '\0';
    cout << buffer << endl;

    fwrite(buffer, sizeof(char), valread, file);

    int read = 0;
    while ((read = fread(buffer, sizeof(char), 1024, file)) > 0) {
        if (send(new_socket, buffer, read, 0) < 0) {
            std::cerr << "Error sending data." << "\n";
            break;
        }
    }

    // Close the connection and close the file
    fclose(file);
    close(new_socket);

    return 0;
}

//client
#include <iostream>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <fstream>
#include <string.h>
#include <unistd.h>

#define PORT 31337
std::string file_name;
int main(int argc, char const *argv[]) {
    int sock = 0, valread;
    struct sockaddr_in serv_addr;
    FILE* file;
    char buffer[1024] = {0};

    if (argc != 3) {
        std::cout << "Usage: ./client IP_address PORT\n";
        return -1;
    }

    // Creating socket file descriptor
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("socket creation error");
        exit(EXIT_FAILURE);
    }

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    // Convert IPv4 address from text to binary form
    if (inet_pton(AF_INET, argv[1], &serv_addr.sin_addr) <= 0) {
        std::cerr << "Invalid IP address\n";
        return -1;
    }

    // Connect to the server
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("Connection failed");
        exit(EXIT_FAILURE);
    }

    // Reading file name from user input
    std::cout << "Enter the file name to send: ";
    std::cin >> file_name;

    // Opening the file to send
    file = fopen(file_name.c_str(), "r");
    if (file == NULL) {
        std::cerr << "Error opening file: " << file_name << "\n";
        return -1;
    }

    // Sending the file name to the server
    send(sock, file_name.c_str(), strlen(file_name.c_str()), 0);

    int read = 0;
    while ((read = fread(buffer, sizeof(char), 1024, file)) > 0) {
        if (send(sock, buffer, read, 0) < 0) {
            std::cerr << "Error sending data." << "\n";
            break;
        }
    }

    // Close the connection and close the file
    fclose(file);
    close(sock);

    return 0;
}
