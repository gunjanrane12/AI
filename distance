class Router:
    def __init__(self, router_id, total_routers):
        self.router_id = router_id
        self.distance_table = {i: float('inf') for i in range(total_routers)}
        self.distance_table[router_id] = 0
        self.neighbors = {}

    def update_neighbor(self, neighbor_id, cost):
        self.neighbors[neighbor_id] = cost

    def send_distance_vector(self, routers):
        updated = False
        for neighbor, cost in self.neighbors.items():
            neighbor_router = routers[neighbor]
            for destination, distance in self.distance_table.items():
                if neighbor_router.distance_table[destination] > distance + cost:
                    neighbor_router.distance_table[destination] = distance + cost
                    updated = True
        return updated

def bellman_ford_routing(routers, total_routers):
    # Perform up to (total_routers - 1) rounds of updates
    for i in range(total_routers - 1):
        for router in routers:
            router.send_distance_vector(routers)

def display_routing_table(routers):
    for router in routers:
        print(f"Routing Table for Router {router.router_id}:")
        for destination, distance in router.distance_table.items():
            print(f"  Destination: {destination}, Distance: {distance if distance != float('inf') else 'Unreachable'}")
        print()

def main():
    total_routers = int(input("Enter the number of routers: "))
    routers=[]
    for i in range(total_routers):
        routers.append(Router(i, total_routers)) 

    # Create the graph for the network
    for i in range(total_routers):
        num_neighbors = int(input(f"Enter number of neighbors for Router {i}: "))
        for _ in range(num_neighbors):
            neighbor_id, cost = map(int, input(f"Enter neighbor and cost for Router {i} (format: neighbor_id cost): ").split())
            routers[i].update_neighbor(neighbor_id, cost)

    # Run the Bellman-Ford-based Distance Vector Routing algorithm
    bellman_ford_routing(routers, total_routers)

    # Display the final routing tables
    display_routing_table(routers)

if __name__ == "__main__":
    main()
